{"version":3,"sources":["components/MyCard.js","components/MyCardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/MyApp.js","reportWebVitals.js","index.js"],"names":["MyCard","name","email","id","className","alt","src","MyCardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setRobots","searchfield","setSearchfield","count","setCount","useEffect","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","MyApp","document","getElementById"],"mappings":"oNAaeA,EAXA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACI,sBAAKC,UAAU,cAAf,UACI,qBAAKC,IAAI,eAAKC,IAAG,+BAA0BH,EAA1B,cACjB,8BAAK,6BAAKF,MACV,4BAAIC,QCkBDK,EAtBI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIlB,OACI,qBAAKJ,UAAU,aAAf,SAEQI,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,UCExBS,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACA,uBACAA,UAAY,GACZU,KAAK,SACLC,YAAY,oDACZC,SAAYH,OCGLI,EAVA,SAACC,GACZ,OACA,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAArE,SACKJ,EAAMK,Y,4BCmBAC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAI7B,WACI,OAAGG,KAAKJ,MAAMC,SACH,8EAEJG,KAAKX,MAAMK,a,GAlBEQ,a,MC0DbC,MArDf,WAAe,MASiBC,mBAAS,IAT1B,mBASJzB,EATI,KASI0B,EATJ,OAU2BD,mBAAS,IAVpC,mBAUJE,EAVI,KAUSC,EAVT,OAWeH,mBAAS,GAXxB,mBAWJI,EAXI,KAWGC,EAXH,KAkBXC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAASV,EAAUU,MACzBC,QAAQC,IAAIT,KACb,CAACA,IAEJ,IAIMU,EAAiBvC,EAAOwC,QAAO,SAAAC,GACjC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAAShB,EAAYe,kBAGzD,OAAQ1C,EAAO4C,OAIX,sBAAKhD,UAAU,WAAf,UACA,mEACA,wBAAQiD,QAAS,kBAAIf,EAASD,EAAM,IAApC,2BACA,cAAC,EAAD,CAAWxB,aAfQ,SAACyC,GACpBlB,EAAekB,EAAMC,OAAOC,UAe5B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAYhD,OAAQuC,WARhC,0CC9BWU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a642e3dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MyCard = ({ name, email, id }) => {\r\n    return (\r\n        <div className='myCard grow'>\r\n            <img alt='사진' src={`https://robohash.org/${id}?200x200`} />\r\n            <div><h2>{name}</h2></div>\r\n            <p>{email}</p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MyCard;","import React from 'react';\r\nimport MyCard from './MyCard';\r\n\r\nconst MyCardList = ({ robots }) => {\r\n\r\n    // throw new Error('dfdsf');\r\n\r\n    return(\r\n        <div className=\"myCardList\">\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                    <MyCard \r\n                        key={robots[i].id} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyCardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className = ''\r\n        type='search' \r\n        placeholder='로봇을 찾아봅시다' \r\n        onChange = {searchChange} />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '70vh'}}>\r\n        {props.children}\r\n   </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>에러가 있습니다.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\r\nimport MyCardList from '../components/MyCardList';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport './MyCss.css';\r\n\r\nfunction App() {\r\n\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         searchfield: ''\r\n    //     }\r\n    // }\r\n    const [robots, setRobots] = useState([])\r\n    const [searchfield, setSearchfield] = useState('')\r\n    const [count, setCount] = useState(0)\r\n\r\n    // componentDidMount() {\r\n    //     fetch('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(response => response.json())\r\n    //     .then(users=>this.setState({robots : users}));\r\n    // }\r\n    useEffect(()=>{\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users=> {setRobots(users)});\r\n        console.log(count);\r\n    }, [count]) // 카운트가 바뀔때만 실행\r\n\r\n    const onSearchChange = (event) => {\r\n        setSearchfield(event.target.value)\r\n    }\r\n\r\n    const filteredRobots = robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n\r\n    return !robots.length ? \r\n    \r\n    <h1>Loading</h1> : \r\n    (\r\n        <div className='outerBox'>\r\n        <span>로봇 친구들</span>\r\n        <button onClick={()=>setCount(count+1)}>클릭!</button>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n            <ErrorBoundary>\r\n                <MyCardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n\r\n        </Scroll>\r\n        </div>\r\n    );\r\n\r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from './containers/MyApp';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}